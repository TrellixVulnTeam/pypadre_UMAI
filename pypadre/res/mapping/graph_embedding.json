{
	"algorithms": [{
		"name": "node_classification",
		"other_names": ["nclf","nc"],
		"implementation": {
			"graph_embedding": "pypadre.core.wrappers.wrapper_graphembeddings.WrapperNodeClassification"
		},
		"type": "Classification",
		"hyper_parameters": {
			"model_parameters": [
				{
				"name": "classifier",
				"kind_of_value": "dictionary",
				"optional": false,
				"description": "The classifier",
				"graph_embedding": {
					"path": "classifier_params"
				}
			}
			]
		}
	},
	{
		"name": "embedding transformer",
		"other_names": ["Emb","embedding"],
		"implementation": {
			"graph_embedding": "pypadre.core.wrappers.wrapper_graphembeddings.WrapperEmbeddings"
		},
		"type": "Preprocessing",
		"hyper_parameters": {
			"model_parameters": [
				{
				"name": "embedding_model",
				"kind_of_value": "dictionary",
				"optional": false,
				"description": "The embedding model",
				"graph_embedding": {
					"path": "model_params"
				}
			}
			]
		}
	},
	{
		"name": "deepwalk embedding",
		"other_names": ["dp_emb","dp","deepwalk"],
		"implementation": {
			"graph_embedding": "pypadre.core.wrappers.wrapper_graphembeddings.WrapperDeepwalk"
		},
		"type": "Preprocessing",
		"hyper_parameters": {
			"model_parameters": [
				{
                        "name": "dataset",
                        "kind_of_value": "string",
                        "optional": "False",
                        "description": "dataset to apply the embedding on.",
                        "graph_embedding": {
                            "default_value": "CiteSeer",
                            "path": "dataset"
                        }
				},
				{
                        "name": "dimension",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Dimensionality of the word vectors",
                        "graph_embedding": {
                            "default_value": "128",
                            "path": "dim"
                        }
				},
				{
                        "name": "alpha",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Word2Vec parameter alpha",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "alpha"
                        }
				},
				{
                        "name": "min_count",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Ignores all words with total frequency lower than this.",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "min_count"
                        }
				},
				{
                        "name": "window",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Maximum distance between the current and predicted word within a sentence.",
                        "graph_embedding": {
                            "default_value": "5",
                            "path": "window"
                        }
				},
				{
                        "name": "sg",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Training algorithm: 1 for skip-gram; otherwise CBOW.",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "sg"
                        }
				},
				{
                        "name": "hs",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "If 1, hierarchical softmax will be used for model training.\n If 0, and `negative` is non-zero, negative sampling will be used.",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "hs"
                        }
				},
				{
                        "name": "path_length",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Path length of the random walks",
                        "graph_embedding": {
                            "default_value": "80",
                            "path": "path_length"
                        }
				},
				{
                        "name": "num_paths",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Number of generated walks for each word (vertex)",
                        "graph_embedding": {
                            "default_value": "10",
                            "path": "num_paths"
                        }
				},
				{
                        "name": "seed",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Random seed",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "seed"
                        }
				}
			]
		}
	},
	{
		"name": "node2vec embedding",
		"other_names": ["n2v_emb","n2v","node2vec"],
		"implementation": {
			"graph_embedding": "pypadre.core.wrappers.wrapper_graphembeddings.WrapperNode2Vec"
		},
		"type": "Preprocessing",
		"hyper_parameters": {
			"model_parameters": [
				{
                        "name": "dataset",
                        "kind_of_value": "string",
                        "optional": "False",
                        "description": "dataset to apply the embedding on.",
                        "graph_embedding": {
                            "default_value": "CiteSeer",
                            "path": "dataset"
                        }
				},
				{
                        "name": "dimension",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Dimensionality of the word vectors",
                        "graph_embedding": {
                            "default_value": "128",
                            "path": "dim"
                        }
				},
				{
                        "name": "alpha",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Word2Vec parameter alpha",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "alpha"
                        }
				},
				{
                        "name": "seed",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Random seed",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "seed"
                        }
				},
				{
                        "name": "min_count",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Ignores all words with total frequency lower than this.",
                        "graph_embedding": {
                            "default_value": "0",
                            "path": "min_count"
                        }
				},
				{
                        "name": "window",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Maximum distance between the current and predicted word within a sentence.",
                        "graph_embedding": {
                            "default_value": "5",
                            "path": "window"
                        }
				},
				{
                        "name": "sg",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Training algorithm: 1 for skip-gram; otherwise CBOW.",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "sg"
                        }
				},
				{
                        "name": "hs",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "If 1, hierarchical softmax will be used for model training.\n If 0, and `negative` is non-zero, negative sampling will be used.",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "hs"
                        }
				},
				{
                        "name": "path_length",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Path length of the random walks",
                        "graph_embedding": {
                            "default_value": "80",
                            "path": "path_length"
                        }
				},
				{
                        "name": "num_paths",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Number of generated walks for each word (vertex)",
                        "graph_embedding": {
                            "default_value": "10",
                            "path": "num_paths"
                        }
				},
				{
                        "name": "p",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Return hyperparameter",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "p"
                        }
				},
				{
                        "name": "q",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Inout hyperparameter",
                        "graph_embedding": {
                            "default_value": "1",
                            "path": "q"
                        }
				}
              ,
				{
                        "name": "workers",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Number of jobs",
                        "graph_embedding": {
                            "default_value": "4",
                            "path": "workers"
                        }
				}
              ,
				{
                        "name": "directed",
                        "kind_of_value": "integer",
                        "optional": "False",
                        "description": "Whether the graph is directed or not",
                        "graph_embedding": {
                            "default_value": false,
                            "path": "directed"
                        }
				}
			]
		}
	},
	{
		"name": "link_prediction",
		"other_names": ["lp"],
		"implementation": {
			"graph_embedding": "pypadre.core.wrappers.wrapper_graphembeddings.WrapperLinkPrediction"
		},
		"type": "Estimator",
		"hyper_parameters": {
			"model_parameters": [
				{
				"name": "Embedding",
				"kind_of_value": "dictionary",
				"optional": false,
				"description": "Embedding parameters",
				"graph_embedding": {
					"path": "embedding_params"
				}
			},
				{
				"name": "Graph",
				"kind_of_value": "dictionary",
				"optional": false,
				"description": "Graph generation parameters",
				"graph_embedding": {
					"path": "graph_params"
				}
			},
				{
				"name": "Classifier",
				"kind_of_value": "dictionary",
				"optional": false,
				"description": "Classifier parameters",
				"graph_embedding": {
					"path": "classifier_params"
				}
			},
				{
				"name": "num_iteration",
				"kind_of_value": "integer",
				"optional": false,
				"description": "Running experiment ID",
				"graph_embedding": {
					"path": "num_iteration"
				}
			}
			]
		}
	}],
	 "metadata": {
        "author": "Mehdi Ben Amor",
        "library": "graph_embedding",
        "library_version": "0.0.1",
        "mapping_version": "0.1"
    }
}